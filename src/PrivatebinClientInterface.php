<?php

namespace Cyvax;

use Exception;

interface PrivatebinClientInterface
{
    /**
     * set paste password
     * @param string $password
     */
    public function set_password(string $password);

    /**
     * set privatebin url.
     * @param string $url
     */
    public function set_url(string $url);

    /**
     * set paste formatter
     * @param string $formatter
     * @param bool $bypass
     */
    public function set_formatter(string $formatter, bool $bypass = false);

    /**
     * set the attachment, use file_location as url or path, use filename to force a filename.
     * @param string $file_location
     * @param string|null $filename
     */
    public function set_attachment(string $file_location, string $filename = null);

    /**
     * set the text of the paste!
     * @param string $text
     */
    public function set_text(string $text);

    /**
     * set compression method
     * @param string $compression : zlib or none
     */
    public function set_compression(string $compression);

    /**
     * set discussion true or false, (default : false)
     * setting this to true will deactivate burn if it's set to true.
     * @param bool $discussion
     */
    public function set_discussion(bool $discussion);

    /**
     * set burn true or false, (default : false)
     * setting this to true will deactivate discussion if it's set to true.
     * @param bool $burn
     */
    public function set_burn(bool $burn);

    /**
     * set debug true or false, (default : false)
     * setting this to true will cause debug information to be printed.
     * @param bool $debug
     */
    public function set_debug(bool $debug);

    /**
     * set expire time, (default : 1day)
     * use bypass for value not in ["5min", "10min", "1hour", "1day", "1week", "1month", "1year", "never"]. (default : 1day)
     * @param string $expire
     * @param bool $bypass
     */
    public function set_expire(string $expire, bool $bypass = false);

    /**
     * Encode string to a paste, return ready to post data with b58 key.
     * @return array|Exception[]
     */
    public function encode(): array;

    /**
     * post data generated by encode().
     * @param array $data
     * @return array
     */
    public function post(array $data): array;

    /**
     * encode and post data.
     * @return array
     */
    public function encode_and_post(): array;
}